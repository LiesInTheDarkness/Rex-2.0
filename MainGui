local screenGui = Instance.new("ScreenGui")
screenGui.Parent = game:GetService("CoreGui")

-- Create the Frame
local frame = Instance.new("Frame")
frame.Size = UDim2.new(0.8, 0, 0.8, 0) -- Significantly bigger size
frame.Position = UDim2.new(0.1, 0, 0.1, 0) -- Center the frame
frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30) -- Dark grey background
frame.BackgroundTransparency = 0.5 -- Make it transparent
frame.BorderSizePixel = 0
frame.Visible = false -- Initially hidden
frame.Parent = screenGui

-- Create the UI Corner for rounded edges
local uiCorner = Instance.new("UICorner")
uiCorner.CornerRadius = UDim.new(0.1, 0) -- Adjust the corner radius as needed
uiCorner.Parent = frame

-- Create the 'Rex' text label
local textLabel = Instance.new("TextLabel")
textLabel.Size = UDim2.new(0.2, 0, 0.1, 0) -- Adjust size as needed
textLabel.Position = UDim2.new(0, 5, 0, 5) -- Top left corner with padding
textLabel.BackgroundTransparency = 1 -- Make background transparent
textLabel.Text = "Rex"
textLabel.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text color
textLabel.TextScaled = true -- Make text scale with size
textLabel.Font = Enum.Font.GothamBold -- Use Gotham bold font
textLabel.Parent = frame

-- Create the Toggle Button
local toggleButton = Instance.new("TextButton")
toggleButton.Size = UDim2.new(0, 50, 0, 50) -- Small square size
toggleButton.Position = UDim2.new(0, 10, 0, 10) -- Initial position
toggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
toggleButton.Text = ""
toggleButton.Parent = screenGui

-- Add rounded corners to the toggle button
local toggleButtonCorner = Instance.new("UICorner")
toggleButtonCorner.CornerRadius = UDim.new(0.5, 0) -- Fully rounded corners
toggleButtonCorner.Parent = toggleButton

-- Make the toggle button draggable
local dragging
local dragInput
local dragStart
local startPos

local function update(input)
    local delta = input.Position - dragStart
    toggleButton.Position = UDim2.new(
        startPos.X.Scale,
        startPos.X.Offset + delta.X,
        startPos.Y.Scale,
        startPos.Y.Offset + delta.Y
    )
end

toggleButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = toggleButton.Position

        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

toggleButton.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType.Touch then
        dragInput = input
    end
end)

game:GetService("UserInputService").InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        update(input)
    end
end)

-- Toggle the visibility of the frame when the toggle button is clicked
toggleButton.MouseButton1Click:Connect(function()
    frame.Visible = not frame.Visible
end)

-- Import CustomModule
local CustomModule = require(script.Parent:WaitForChild("CustomModule"))

-- Function to create a toggle button in the GUI
local function createToggleButton(toggle)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0.2, 0, 0.1, 0)
    button.Position = UDim2.new(0, 5, 0, 45 + (#CustomModule.Toggles - 1) * 50) -- Adjust position as needed
    button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    button.Text = toggle.Name
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.TextScaled = true
    button.Font = Enum.Font.GothamBold
    button.Parent = frame
    
    -- Toggle state
    local state = false
    button.MouseButton1Click:Connect(function()
        state = not state
        toggle.Function(state)
        button.BackgroundColor3 = state and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(50, 50, 50)
    end)
end

-- Add toggles from CustomModule
for _, toggle in ipairs(CustomModule.Toggles) do
    createToggleButton(toggle)
end

return {
    createToggleButton = createToggleButton
}